        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:// Author: Polly Sobeck
        -:    2:// Program: cardtest1.c
        -:    3:// Date: 2/9/2019
        -:    4:// This program tests the testPlayVillage() card function in
        -:    5:// dominion.c. Some of the initial variable declarations 
        -:    6:// were adapted from the example: testUpdateCoins.c
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include <stdlib.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdbool.h>
        -:   16:
        -:   17:bool asserttrue(bool isTrue) {
       15:   18:    return isTrue;
        -:   19:}
        -:   20:
        -:   21:void testPlayVillage() {
        -:   22:    struct gameState G;
       10:   23:    int numPlayer = 2;
        5:   24:    int seed = 1000;    
        -:   25:    int r, currentPlayer, handPos,
        -:   26:        initHandCount, endHandCount,
        -:   27:        initDeckCount, endDeckCount,
        -:   28:        initNumActions, endNumActions;
        -:   29:
        -:   30:
        5:   31:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   32:               , remodel, smithy, village, baron, great_hall};
        -:   33:
        5:   34:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        5:   35:    r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        -:   36:    
        5:   37:    handPos = 0;
        5:   38:    currentPlayer = 0;
        -:   39:
        5:   40:    initHandCount = G.handCount[currentPlayer];
        5:   41:    initDeckCount = G.deckCount[currentPlayer];
        5:   42:    initNumActions = G.numActions;
        5:   43:    playVillage(handPos, currentPlayer, &G);
        -:   44:
        5:   45:    endHandCount = G.handCount[currentPlayer];
        5:   46:    endDeckCount = G.deckCount[currentPlayer];
        5:   47:    endNumActions = G.numActions;
        -:   48:
        -:   49:    /* Test 1: Assert that the player's hand count has not increased */
        -:   50:    /* All other cards drawn should have been discarded */
        5:   51:    printf("Test 1: %s\n", asserttrue((endHandCount - initHandCount) == 0) ? "true" : "false");
        -:   52:
        -:   53:    /* Test 2: Assert that the deck's count has decreased by 1 */
        5:   54:    printf("Test 2: %s\n", asserttrue((initDeckCount - endDeckCount) == 1)  ? "true" : "false");
        -:   55:
        -:   56:    /* Test 3: Assert that the number of actions increased by 2 */
        5:   57:    printf("Test 3: %s\n", asserttrue((endNumActions - initNumActions) == 2)  ? "true" : "false");
        5:   58:}
        -:   59:
        -:   60:int main() {
       10:   61:    printf("Testing playVillage()...\n");
        5:   62:    testPlayVillage();
        5:   63:}
