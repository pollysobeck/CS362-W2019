        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Author: Polly Sobeck
        -:    2:// Program: randomtestadventurer.c
        -:    3:// Date: 2/19/2019
        -:    4:// This program runs 1000 random tests for the 
        -:    5:// playAdventurer method in dominion.c. It randomly assigns
        -:    6:// values for currentPlayer, deckCount[currentPlayer], 
        -:    7:// handCount[currentPlayer], and discardCount[currentPlayer]
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include <stdlib.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdbool.h>
        -:   17:#include <time.h> 
        -:   18:
        -:   19:bool asserttrue(bool isTrue) {
     2997:   20:    return isTrue;
        -:   21:}
        -:   22:
        -:   23:void randomTestPlayAdventurer() {
     1998:   24:    srand(time(0)); 
        -:   25:    struct gameState G;
      999:   26:    int numPlayer = 2;
      999:   27:    int seed = 1000;    
        -:   28:    int r, currentPlayer, cardDrawn,
        -:   29:        initHandCount, endHandCount,
        -:   30:        initDeckCount, endDeckCount;
        -:   31:
      999:   32:    int k[10] = {adventurer, council_room, feast, gardens, mine, 
        -:   33:            remodel, smithy, village, baron, great_hall};
        -:   34:
      999:   35:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
      999:   36:        r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        -:   37:        
        -:   38:        // Get random values for current player, player's deckCount, handCount, and discardCount
      999:   39:        currentPlayer = rand() % numPlayer;
      999:   40:        G.deckCount[currentPlayer] = rand() % 1000;
      999:   41:        G.handCount[currentPlayer] = rand() % 1000;
      999:   42:        G.discardCount[(currentPlayer == 0 ? 0 : 1)] = rand() % 1000;
        -:   43:
      999:   44:        initHandCount = G.handCount[currentPlayer];
      999:   45:        initDeckCount = G.deckCount[currentPlayer];
        -:   46:
      999:   47:        playAdventurer(currentPlayer, &G);
        -:   48:
      999:   49:        endHandCount = G.handCount[currentPlayer];
      999:   50:        endDeckCount = G.deckCount[currentPlayer];
        -:   51:
        -:   52:        /* Test 1: Assert that the player's hand count increased by 2 (treasure cards) */
        -:   53:        /* All other cards drawn should have been discarded */
      999:   54:        printf("Test Player's Hand Count: %s\n", asserttrue((endHandCount - initHandCount) == 2) ? "pass" : "fail");
        -:   55:
        -:   56:        /* Test 2: Assert that the deck's count has decreased by at least 2 */
      999:   57:        printf("Test Deck Count: %s\n", asserttrue((initDeckCount - endDeckCount) >= 2) ? "pass" : "fail");
        -:   58:
        -:   59:        /* Test 2: Assert that the last drawn card is a treasure card*/
      999:   60:        cardDrawn = G.hand[currentPlayer][G.handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1998:   61:        printf("Test Last Drawn Card: %s\n", asserttrue(cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) ? "pass" : "fail");
        -:   62:
      999:   63:}
        -:   64:
        -:   65:int main() {
        1:   66:    printf("Random Tests for playAdventurer()...\n");
     2000:   67:    for (int i = 1; i < 1000; i++) {
      999:   68:        printf("Test %d\n", i + 1);
      999:   69:        randomTestPlayAdventurer();
      999:   70:        printf("\n");
      999:   71:    }
        1:   72:}
