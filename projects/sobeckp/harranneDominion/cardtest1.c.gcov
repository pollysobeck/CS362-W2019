        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Author: Polly Sobeck
        -:    2:// Program: cardtest1.c
        -:    3:// Date: 2/9/2019
        -:    4:// This program tests the testPlaySmithy() card function in
        -:    5:// dominion.c. Some of the initial variable declarations 
        -:    6:// were adapted from the example: testUpdateCoins.c
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include <stdlib.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdbool.h>
        -:   16:
        -:   17:bool asserttrue(bool isTrue) {
        2:   18:    return isTrue;
        -:   19:}
        -:   20:
        -:   21:void testPlaySmithy() {
        -:   22:    struct gameState G;
        2:   23:    int numPlayer = 2;
        1:   24:    int seed = 1000;    
        -:   25:    int r, currentPlayer, handPos, 
        -:   26:        initDeckCount, endDeckCount,
        -:   27:        initHandCount, endHandCount;
        -:   28:
        -:   29:
        1:   30:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   31:               , remodel, smithy, village, baron, great_hall};
        -:   32:
        1:   33:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   34:    r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        -:   35:
        1:   36:    handPos = 0;
        1:   37:    currentPlayer = 0;
        -:   38:
        1:   39:    initDeckCount = G.deckCount[currentPlayer];
        1:   40:    initHandCount = G.handCount[currentPlayer];
        -:   41:    
        1:   42:    smithyEffect( &G, currentPlayer, handPos);
        1:   43:    endDeckCount = G.deckCount[currentPlayer];
        1:   44:    endHandCount = G.handCount[currentPlayer];
        -:   45:    
        -:   46:    /** Test 1: Assert that deck has three fewer cards **/
        1:   47:    printf("Test 1: %s\n", asserttrue(3 == (initDeckCount - endDeckCount)) ? "true" : "false");
        -:   48:
        -:   49:    /** Test 2: Assert that hand has two more cards **/
        1:   50:    printf("Test 2: %s\n", asserttrue(2 == (endHandCount - initHandCount)) ? "true" : "false");
        1:   51:}
        -:   52:
        -:   53:int main() {
        2:   54:    printf("Testing playSmithy()...\n");
        1:   55:    testPlaySmithy();
        1:   56:}
