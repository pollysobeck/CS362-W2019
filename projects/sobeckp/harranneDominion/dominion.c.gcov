        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test comment by harranne
        -:    9:
        -:   10:int compare(const void* a, const void* b) {
    56056:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
    56056:   13:  if (*(int*)a < *(int*)b)
    20020:   14:    return -1;
    36036:   15:  return 0;
    56056:   16:}
        -:   17:
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
        1:   25:  int* k = malloc(10 * sizeof(int));
        1:   26:  k[0] = k1;
        1:   27:  k[1] = k2;
        1:   28:  k[2] = k3;
        1:   29:  k[3] = k4;
        1:   30:  k[4] = k5;
        1:   31:  k[5] = k6;
        1:   32:  k[6] = k7;
        1:   33:  k[7] = k8;
        1:   34:  k[8] = k9;
        1:   35:  k[9] = k10;
        1:   36:  return k;
        -:   37:}
        -:   38:
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
     2003:   46:  SelectStream(1);
     2003:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
     4005:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
        1:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
     2002:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
    44044:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
   440440:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
   380380:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
   200200:   67:        }
    20020:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
     2002:   75:  if (numPlayers == 2)
        -:   76:    {
     2002:   77:      state->supplyCount[curse] = 10;
     2002:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
     2002:   89:  if (numPlayers == 2)
        -:   90:    {
     2002:   91:      state->supplyCount[estate] = 8;
     2002:   92:      state->supplyCount[duchy] = 8;
     2002:   93:      state->supplyCount[province] = 8;
     2002:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
     2002:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2002:  104:  state->supplyCount[silver] = 40;
     2002:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    84084:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
   660660:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
   310310:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
    38038:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
     4004:  117:		  if (numPlayers == 2){ 
     4004:  118:		    state->supplyCount[i] = 8; 
     4004:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
     4004:  121:		}
        -:  122:	      else
        -:  123:		{
    16016:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
    20020:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
   290290:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
   290290:  132:	}
        -:  133:
    40040:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
    12012:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
     4004:  142:      state->deckCount[i] = 0;
    32032:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
    12012:  145:	  state->deck[i][j] = estate;
    12012:  146:	  state->deckCount[i]++;
    12012:  147:	}
    64064:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
    28028:  150:	  state->deck[i][j] = copper;
    28028:  151:	  state->deckCount[i]++;		
    28028:  152:	}
     4004:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
    12012:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
     4004:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
     4004:  162:    }
        -:  163:
        -:  164:  //draw player hands
    12012:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
     4004:  168:      state->handCount[i] = 0;
     4004:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
     4004:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
   112112:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
    54054:  180:      state->embargoTokens[i] = 0;
    54054:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
     2002:  184:  state->outpostPlayed = 0;
     2002:  185:  state->phase = 0;
     2002:  186:  state->numActions = 1;
     2002:  187:  state->numBuys = 1;
     2002:  188:  state->playedCardCount = 0;
     2002:  189:  state->whoseTurn = 0;
     2002:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
    24024:  194:  for (it = 0; it < 5; it++){
    10010:  195:    drawCard(state->whoseTurn, state);
    10010:  196:  }
        -:  197:
     2002:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
     2002:  200:  return 0;
     2003:  201:}
        -:  202:
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
     4004:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
     4004:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
     4004:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
    88088:  216:  while (state->deckCount[player] > 0) {
    40040:  217:    card = floor(Random() * state->deckCount[player]);
    40040:  218:    newDeck[newDeckPos] = state->deck[player][card];
    40040:  219:    newDeckPos++;
   280280:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
   100100:  221:      state->deck[player][i] = state->deck[player][i+1];
   100100:  222:    }
    40040:  223:    state->deckCount[player]--;
        -:  224:  }
    88088:  225:  for (i = 0; i < newDeckPos; i++) {
    40040:  226:    state->deck[player][i] = newDeck[i];
    40040:  227:    state->deckCount[player]++;
    40040:  228:  }
        -:  229:
     4004:  230:  return 0;
     4004:  231:}
        -:  232:
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
        -:  313:int numHandCards(struct gameState *state) {
       10:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
        -:  348:int whoseTurn(struct gameState *state) {
       17:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
        2:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
       24:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       10:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
       10:  361:  }
        2:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
        2:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
        1:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        1:  367:  }
        -:  368:  else{
        1:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
        2:  372:  state->outpostPlayed = 0;
        2:  373:  state->phase = 0;
        2:  374:  state->numActions = 1;
        2:  375:  state->coins = 0;
        2:  376:  state->numBuys = 1;
        2:  377:  state->playedCardCount = 0;
        2:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
       24:  382:  for (k = 0; k < 5; k++){
       10:  383:    drawCard(state->whoseTurn, state);//Draw a card
       10:  384:  }
        -:  385:
        -:  386:  //Update money
        2:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
        2:  389:  return 0;
        -:  390:}
        -:  391:
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        2:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        2:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
       50:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
        2:  408:	  j++;
        2:  409:	}
       50:  410:    }
        2:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        4:  417:}
        -:  418:
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
    14021:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
    14021:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
    14021:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
    14021:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    14021:  578:    state->deckCount[player]--;
    14021:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
    14021:  582:  return 0;
    14021:  583:}
        -:  584:
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
        -:  648:/*************************************************************************
        -:  649: REFACTORING SECTION
        -:  650:**************************************************************************/
        -:  651:
        -:  652://Refactoring Smithy
        -:  653:int smithyEffect(struct gameState *state, int currentPlayer, int handPos){
        -:  654:	int i;
        -:  655:	//BUG 
        -:  656:	// original statement: for(i=0; i < 3; i++)
        -:  657:	// bug intorudced: changed i < 3 to i <= 3
        -:  658:	// the bug will allow to draw one extra card
     8000:  659:	for (i = 0; i < 3; i++){
     3000:  660:		drawCard(currentPlayer, state);
     3000:  661:	}
        -:  662:
        -:  663:	//discard card from hand
     1000:  664:	discardCard(handPos, currentPlayer, state, 0);
     1000:  665:	return 0;
        -:  666:}
        -:  667:
        -:  668://Refactoring Adventurer
        -:  669:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[MAX_HAND], int z) {
        -:  670:	int cardDrawn;
        6:  671:	while (drawntreasure < 2) {
        -:  672:		//BUG
        -:  673:		//commenting out the section where we check to see if we need to shuffle the deck
        -:  674:		
        2:  675:		if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  676:			shuffle(currentPlayer, state);
    #####:  677:		}
        -:  678:		
        2:  679:		drawCard(currentPlayer, state);
        2:  680:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        2:  681:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  682:			drawntreasure++;
        -:  683:		else {
    #####:  684:			temphand[z] = cardDrawn;
    #####:  685:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  686:			z++;
        -:  687:		}
        -:  688:	}
        2:  689:	while (z - 1 >= 0) {
    #####:  690:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  691:		z = z - 1;
        -:  692:	}
        1:  693:	return 0;
        -:  694:}
        -:  695:
        -:  696://refactoring village 
        -:  697:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:	//+1 Card
      999:  699:	drawCard(currentPlayer, state);
        -:  700:
        -:  701:	//+2 Actions
      999:  702:	state->numActions = state->numActions + 2;
        -:  703:
        -:  704:	//discard played card from hand
        -:  705:	//BUG INSERTED HERE
        -:  706:	//changed the final parameter of discardCard from 0 to 1
        -:  707:	//discardCard(handPos, currentPlayer, state, 0);
      999:  708:	discardCard(handPos, currentPlayer, state, 1);
      999:  709:	return 0;
        -:  710:}
        -:  711:
        -:  712://refactoring great hall
        -:  713:int greatHallEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  714:	//+1 Card
    #####:  715:	drawCard(currentPlayer, state);
        -:  716:
        -:  717:	//+1 Actions
    #####:  718:	state->numActions++;
        -:  719:
        -:  720:	//discard card from hand
    #####:  721:	discardCard(handPos, currentPlayer, state, 0);
    #####:  722:	return 0;
        -:  723:}
        -:  724:
        -:  725://refacotring council_room
        -:  726:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
    #####:  727:	int i = 0;
        -:  728:	//+4 Cards
    #####:  729:	for (i = 0; i < 4; i++)
        -:  730:	{
    #####:  731:		drawCard(currentPlayer, state);
    #####:  732:	}
        -:  733:
        -:  734:	//+1 Buy
    #####:  735:	state->numBuys++;
        -:  736:
        -:  737:	//Each other player draws a card
    #####:  738:	for (i = 0; i < state->numPlayers; i++)
        -:  739:	{
        -:  740:		//BUG
        -:  741:		//Removing if statement that checks for the current player
        -:  742:		//This will allow the current player to also draw an additional card which
        -:  743:		//is incorrect behavior for this card
        -:  744:		//if (i != currentPlayer)
        -:  745:		//{
    #####:  746:			drawCard(i, state);
        -:  747:		//}
    #####:  748:	}
        -:  749:
        -:  750:	//put played card in played card pile
    #####:  751:	discardCard(handPos, currentPlayer, state, 0);
        -:  752:
    #####:  753:	return 0;
        -:  754:}
        -:  755:
        -:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
        -:  761:  int x;
        -:  762:  int index;
    #####:  763:  int currentPlayer = whoseTurn(state);
    #####:  764:  int nextPlayer = currentPlayer + 1;
        -:  765:
    #####:  766:  int tributeRevealedCards[2] = {-1, -1};
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
    #####:  768:  int drawntreasure=0;
        -:  769:  //variable cardDrawn not needed as it will be initialized in the adventurerEffect function
        -:  770:  //int cardDrawn;
        -:  771:  //variable z not needed as it will be initialized in the adventurerEffect function
    #####:  772:  int z = 0;// this is the counter for the temp hand
    #####:  773:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  774:    nextPlayer = 0;
    #####:  775:  }
        -:  776:  
        -:  777:	
        -:  778:  //uses switch to select card and perform actions
    #####:  779:  switch( card ) 
        -:  780:    {
        -:  781:    case adventurer:
        -:  782:		//refactored
    #####:  783:		adventurerEffect(drawntreasure, state, currentPlayer, temphand, z);
        -:  784:		/*
        -:  785:      while(drawntreasure<2){
        -:  786:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  787:	  shuffle(currentPlayer, state);
        -:  788:	}
        -:  789:	drawCard(currentPlayer, state);
        -:  790:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  791:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  792:	  drawntreasure++;
        -:  793:	else{
        -:  794:	  temphand[z]=cardDrawn;
        -:  795:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  796:	  z++;
        -:  797:	}
        -:  798:      }
        -:  799:      while(z-1>=0){
        -:  800:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  801:	z=z-1;
        -:  802:      }
        -:  803:      return 0;
        -:  804:	*/
        -:  805:
        -:  806:    case council_room:
    #####:  807:		councilRoomEffect(currentPlayer, state, handPos);
        -:  808:		/*
        -:  809:      //+4 Cards
        -:  810:      for (i = 0; i < 4; i++)
        -:  811:	{
        -:  812:	  drawCard(currentPlayer, state);
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
        -:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
        -:  819:      for (i = 0; i < state->numPlayers; i++)
        -:  820:	{
        -:  821:	  if ( i != currentPlayer )
        -:  822:	    {
        -:  823:	      drawCard(i, state);
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
        -:  828:      discardCard(handPos, currentPlayer, state, 0);
        -:  829:			
        -:  830:      return 0;
        -:  831:			*/
        -:  832:
        -:  833:    case feast:
        -:  834:      //gain card with cost up to 5
        -:  835:      //Backup hand
    #####:  836:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  837:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  838:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  839:      }
        -:  840:      //Backup hand
        -:  841:
        -:  842:      //Update Coins for Buy
    #####:  843:      updateCoins(currentPlayer, state, 5);
    #####:  844:      x = 1;//Condition to loop on
    #####:  845:      while( x == 1) {//Buy one card
    #####:  846:	if (supplyCount(choice1, state) <= 0){
        -:  847:	  if (DEBUG)
        -:  848:	    printf("None of that card left, sorry!\n");
        -:  849:
        -:  850:	  if (DEBUG){
        -:  851:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  852:	  }
    #####:  853:	}
    #####:  854:	else if (state->coins < getCost(choice1)){
    #####:  855:	  printf("That card is too expensive!\n");
        -:  856:
        -:  857:	  if (DEBUG){
        -:  858:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  859:	  }
    #####:  860:	}
        -:  861:	else{
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  865:	  }
        -:  866:
    #####:  867:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  868:	  x = 0;//No more buying cards
        -:  869:
        -:  870:	  if (DEBUG){
        -:  871:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  872:	  }
        -:  873:
        -:  874:	}
        -:  875:      }     
        -:  876:
        -:  877:      //Reset Hand
    #####:  878:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  879:	state->hand[currentPlayer][i] = temphand[i];
    #####:  880:	temphand[i] = -1;
    #####:  881:      }
        -:  882:      //Reset Hand
        -:  883:      			
    #####:  884:      return 0;
        -:  885:			
        -:  886:    case gardens:
    #####:  887:      return -1;
        -:  888:			
        -:  889:    case mine:
    #####:  890:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  891:
    #####:  892:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  893:	{
    #####:  894:	  return -1;
        -:  895:	}
        -:  896:		
    #####:  897:      if (choice2 > treasure_map || choice2 < curse)
        -:  898:	{
    #####:  899:	  return -1;
        -:  900:	}
        -:  901:
    #####:  902:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  903:	{
    #####:  904:	  return -1;
        -:  905:	}
        -:  906:
    #####:  907:      gainCard(choice2, state, 2, currentPlayer);
        -:  908:
        -:  909:      //discard card from hand
    #####:  910:      discardCard(handPos, currentPlayer, state, 0);
        -:  911:
        -:  912:      //discard trashed card
    #####:  913:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  914:	{
    #####:  915:	  if (state->hand[currentPlayer][i] == j)
        -:  916:	    {
    #####:  917:	      discardCard(i, currentPlayer, state, 0);			
    #####:  918:	      break;
        -:  919:	    }
    #####:  920:	}
        -:  921:			
    #####:  922:      return 0;
        -:  923:			
        -:  924:    case remodel:
    #####:  925:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  926:
    #####:  927:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  928:	{
    #####:  929:	  return -1;
        -:  930:	}
        -:  931:
    #####:  932:      gainCard(choice2, state, 0, currentPlayer);
        -:  933:
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
        -:  936:
        -:  937:      //discard trashed card
    #####:  938:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  939:	{
    #####:  940:	  if (state->hand[currentPlayer][i] == j)
        -:  941:	    {
    #####:  942:	      discardCard(i, currentPlayer, state, 0);			
    #####:  943:	      break;
        -:  944:	    }
    #####:  945:	}
        -:  946:
        -:  947:
    #####:  948:      return 0;
        -:  949:		
        -:  950:	  //refactored
        -:  951:	case smithy:
    #####:  952:		smithyEffect(state, currentPlayer, handPos);
        -:  953:
        -:  954:      //+3 Cards
        -:  955:      /*for (i = 0; i < 3; i++)
        -:  956:	{
        -:  957:	  drawCard(currentPlayer, state);
        -:  958:	}
        -:  959:			
        -:  960:      //discard card from hand
        -:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:      return 0;
        -:  963:		*/
        -:  964:
        -:  965:		//refactored
        -:  966:    case village:
    #####:  967:		villageEffect(currentPlayer, state, handPos);
        -:  968:		/*
        -:  969:      //+1 Card
        -:  970:      drawCard(currentPlayer, state);
        -:  971:			
        -:  972:      //+2 Actions
        -:  973:      state->numActions = state->numActions + 2;
        -:  974:			
        -:  975:      //discard played card from hand
        -:  976:      discardCard(handPos, currentPlayer, state, 0);
        -:  977:      return 0;
        -:  978:		*/
        -:  979:
        -:  980:    case baron:
    #####:  981:      state->numBuys++;//Increase buys by 1!
    #####:  982:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  983:	int p = 0;//Iterator for hand!
    #####:  984:	int card_not_discarded = 1;//Flag for discard set!
    #####:  985:	while(card_not_discarded){
    #####:  986:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  987:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  988:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  989:	    state->discardCount[currentPlayer]++;
    #####:  990:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  991:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  992:	    }
    #####:  993:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  994:	    state->handCount[currentPlayer]--;
    #####:  995:	    card_not_discarded = 0;//Exit the loop
    #####:  996:	  }
    #####:  997:	  else if (p > state->handCount[currentPlayer]){
        -:  998:	    if(DEBUG) {
        -:  999:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1000:	      printf("Must gain an estate if there are any\n");
        -: 1001:	    }
    #####: 1002:	    if (supplyCount(estate, state) > 0){
    #####: 1003:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1004:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1005:	      if (supplyCount(estate, state) == 0){
    #####: 1006:		isGameOver(state);
    #####: 1007:	      }
    #####: 1008:	    }
    #####: 1009:	    card_not_discarded = 0;//Exit the loop
    #####: 1010:	  }
        -: 1011:			    
        -: 1012:	  else{
    #####: 1013:	    p++;//Next card
        -: 1014:	  }
        -: 1015:	}
    #####: 1016:      }
        -: 1017:			    
        -: 1018:      else{
    #####: 1019:	if (supplyCount(estate, state) > 0){
    #####: 1020:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1021:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1022:	  if (supplyCount(estate, state) == 0){
    #####: 1023:	    isGameOver(state);
    #####: 1024:	  }
    #####: 1025:	}
        -: 1026:      }
        -: 1027:	    
        -: 1028:      
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:	  //refactored
        -: 1032:    case great_hall:
    #####: 1033:		greatHallEffect(currentPlayer, state, handPos);
        -: 1034:		/*
        -: 1035:      //+1 Card
        -: 1036:      drawCard(currentPlayer, state);
        -: 1037:			
        -: 1038:      //+1 Actions
        -: 1039:      state->numActions++;
        -: 1040:			
        -: 1041:      //discard card from hand
        -: 1042:      discardCard(handPos, currentPlayer, state, 0);
        -: 1043:      return 0;
        -: 1044:	  */
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
    #####: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
    #####: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
    #####: 1089:			}
    #####: 1090:		    }
    #####: 1091:		}
    #####: 1092:	    }
        -: 1093:				
    #####: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
    #####: 1102:	  drawCard(currentPlayer, state);
    #####: 1103:	}
    #####: 1104:      else if (choice1 == 2)
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
    #####: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
    #####: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
    #####: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
    #####: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
    #####: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
    #####: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1165:	  state->coins += 2;
    #####: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1169:	  drawCard(currentPlayer, state);
    #####: 1170:	  drawCard(currentPlayer, state);
    #####: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
    #####: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1195:	    {
    #####: 1196:	      j++;
    #####: 1197:	    }
    #####: 1198:	}
    #####: 1199:      if (j < choice2)
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1216:	    }
    #####: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
    #####: 1230:		  break;
        -: 1231:		}
    #####: 1232:	    }
    #####: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
    #####: 1260:		}
        -: 1261:					
    #####: 1262:	    }
        -: 1263:				
    #####: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo: 
        -: 1273:      //+2 Coins
    #####: 1274:      state->coins = state->coins + 2;
        -: 1275:			
        -: 1276:      //see if selected pile is in play
    #####: 1277:      if ( state->supplyCount[choice1] == -1 )
        -: 1278:	{
    #####: 1279:	  return -1;
        -: 1280:	}
        -: 1281:			
        -: 1282:      //add embargo token to selected supply pile
    #####: 1283:      state->embargoTokens[choice1]++;
        -: 1284:			
        -: 1285:      //trash card
    #####: 1286:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1287:      return 0;
        -: 1288:		
        -: 1289:    case outpost:
        -: 1290:      //set outpost flag
    #####: 1291:      state->outpostPlayed++;
        -: 1292:			
        -: 1293:      //discard card
    #####: 1294:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1295:      return 0;
        -: 1296:	  
        -: 1297:		
        -: 1298:    case salvager:
        -: 1299:      //+1 buy
    #####: 1300:      state->numBuys++;
        -: 1301:			
    #####: 1302:      if (choice1)
        -: 1303:	{
        -: 1304:	  //gain coins equal to trashed card
    #####: 1305:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1306:	  //trash card
    #####: 1307:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1308:	}
        -: 1309:			
        -: 1310:      //discard card
    #####: 1311:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1312:      return 0;
        -: 1313:		
        -: 1314:    case sea_hag:
    #####: 1315:      for (i = 0; i < state->numPlayers; i++){
    #####: 1316:	if (i != currentPlayer){
    #####: 1317:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1318:	  state->discardCount[i]++;
    #####: 1319:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1320:	}
    #####: 1321:      }
    #####: 1322:      return 0;
        -: 1323:		
        -: 1324:    case treasure_map:
        -: 1325:      //search hand for another treasure_map
    #####: 1326:      index = -1;
    #####: 1327:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1328:	{
    #####: 1329:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1330:	    {
    #####: 1331:	      index = i;
    #####: 1332:	      break;
        -: 1333:	    }
    #####: 1334:	}
    #####: 1335:      if (index > -1)
        -: 1336:	{
        -: 1337:	  //trash both treasure cards
    #####: 1338:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1339:	  discardCard(index, currentPlayer, state, 1);
        -: 1340:
        -: 1341:	  //gain 4 Gold cards
    #####: 1342:	  for (i = 0; i < 4; i++)
        -: 1343:	    {
    #####: 1344:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1345:	    }
        -: 1346:				
        -: 1347:	  //return success
    #####: 1348:	  return 1;
        -: 1349:	}
        -: 1350:			
        -: 1351:      //no second treasure_map found in hand
    #####: 1352:      return -1;
        -: 1353:    }
        -: 1354:	
    #####: 1355:  return -1;
    #####: 1356:}
        -: 1357:
        -: 1358:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1359:{
        -: 1360:	
        -: 1361:  //if card is not trashed, added to Played pile 
     1999: 1362:  if (trashFlag < 1)
        -: 1363:    {
        -: 1364:      //add card to played pile
     1000: 1365:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1366:      state->playedCardCount++;
     1000: 1367:    }
        -: 1368:	
        -: 1369:  //set played card to -1
     1999: 1370:  state->hand[currentPlayer][handPos] = -1;
        -: 1371:	
        -: 1372:  //remove card from player's hand
     1999: 1373:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1374:    {
        -: 1375:      //reduce number of cards in hand
    #####: 1376:      state->handCount[currentPlayer]--;
    #####: 1377:    }
     1999: 1378:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
    #####: 1382:    }
        -: 1383:  else 	
        -: 1384:    {
        -: 1385:      //replace discarded card with last card in hand
     1999: 1386:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1387:      //set last card to -1
     1999: 1388:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1389:      //reduce number of cards in hand
     1999: 1390:      state->handCount[currentPlayer]--;
        -: 1391:    }
        -: 1392:	
     1999: 1393:  return 0;
        -: 1394:}
        -: 1395:
        -: 1396:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1397:{
        -: 1398:  //Note: supplyPos is enum of choosen card
        -: 1399:	
        -: 1400:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1401:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1402:    {
    #####: 1403:      return -1;
        -: 1404:    }
        -: 1405:	
        -: 1406:  //added card for [whoseTurn] current player:
        -: 1407:  // toFlag = 0 : add to discard
        -: 1408:  // toFlag = 1 : add to deck
        -: 1409:  // toFlag = 2 : add to hand
        -: 1410:
    #####: 1411:  if (toFlag == 1)
        -: 1412:    {
    #####: 1413:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1414:      state->deckCount[player]++;
    #####: 1415:    }
    #####: 1416:  else if (toFlag == 2)
        -: 1417:    {
    #####: 1418:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1419:      state->handCount[player]++;
    #####: 1420:    }
        -: 1421:  else
        -: 1422:    {
    #####: 1423:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1424:      state->discardCount[player]++;
        -: 1425:    }
        -: 1426:	
        -: 1427:  //decrease number in supply pile
    #####: 1428:  state->supplyCount[supplyPos]--;
        -: 1429:	 
    #####: 1430:  return 0;
    #####: 1431:}
        -: 1432:
        -: 1433:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1434:{
        -: 1435:  int i;
        -: 1436:	
        -: 1437:  //reset coin count
     2004: 1438:  state->coins = 0;
        -: 1439:
        -: 1440:  //add coins for each Treasure card in player's hand
    24048: 1441:  for (i = 0; i < state->handCount[player]; i++)
        -: 1442:    {
    10020: 1443:      if (state->hand[player][i] == copper)
        -: 1444:	{
     8014: 1445:	  state->coins += 1;
     8014: 1446:	}
     2006: 1447:      else if (state->hand[player][i] == silver)
        -: 1448:	{
    #####: 1449:	  state->coins += 2;
    #####: 1450:	}
     2006: 1451:      else if (state->hand[player][i] == gold)
        -: 1452:	{
    #####: 1453:	  state->coins += 3;
    #####: 1454:	}	
    10020: 1455:    }	
        -: 1456:
        -: 1457:  //add bonus
     2004: 1458:  state->coins += bonus;
        -: 1459:
     2004: 1460:  return 0;
        -: 1461:}
        -: 1462:
        -: 1463:
        -: 1464://end of dominion.c
        -: 1465:
